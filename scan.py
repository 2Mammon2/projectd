import os
import requests
import subprocess
import re
import socket

#-----------------------------------------------#
# H√†m x·ª≠ l√Ω
# H√†m ch·∫°y l·ªánh h·ªá th·ªëng v·ªõi x·ª≠ l√Ω l·ªói t·ª± ƒë·ªông
def run_command(command, fix_function=None):
    print(f"\n[+] ƒêang th·ª±c thi: {command}")
    
    try:
        result = subprocess.run(command, shell=True, text=True, capture_output=True)
        output = result.stdout + result.stderr
        
        if result.returncode != 0:
            print("\n[-] L·ªánh g·∫∑p l·ªói:")
            print(output)
            if fix_function:
                print("\n[‚öôÔ∏è] AI ƒëang c·ªë g·∫Øng s·ª≠a l·ªói v√† ch·∫°y l·∫°i...")
                fix_function()
        else:
            print(output)
    
    except Exception as e:
        print(f"[-] L·ªói h·ªá th·ªëng: {e}")

def clean_target_url(target):
    """ Lo·∫°i b·ªè https://, http://, d·∫•u /, ? v√† tham s·ªë """
    clean_target = re.sub(r"https?://", "", target)  # X√≥a http:// ho·∫∑c https://
    clean_target = clean_target.split('/')[0]  # L·∫•y ph·∫ßn t√™n mi·ªÅn ch√≠nh
    clean_target = clean_target.split('?')[0]  # Lo·∫°i b·ªè c√°c tham s·ªë URL n·∫øu c√≥
    return clean_target

def resolve_domain(domain):
    """ Ki·ªÉm tra xem t√™n mi·ªÅn c√≥ h·ª£p l·ªá kh√¥ng """
    try:
        ip = socket.gethostbyname(domain)
        print(f"[+] T√™n mi·ªÅn h·ª£p l·ªá! ƒê·ªãa ch·ªâ IP: {ip}")
        return ip
    except socket.gaierror:
        print("[-] Kh√¥ng th·ªÉ ph√¢n gi·∫£i t√™n mi·ªÅn. Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ IP tr·ª±c ti·∫øp.")
        return None
# üî• AI t·ª± ƒë·ªông t√¨m hi·ªÉu m·ª•c ti√™u
def analyze_target(target):
    print("\n[üîç] ƒêang ph√¢n t√≠ch m·ª•c ti√™u v·ªõi AI...")
    try:
        headers = requests.get(target).headers
        print("[+] Headers thu th·∫≠p ƒë∆∞·ª£c:", headers)

        # X√°c ƒë·ªãnh c√¥ng ngh·ªá web
        tech_stack = []
        if "X-Powered-By" in headers:
            tech_stack.append(headers["X-Powered-By"])
        if "Server" in headers:
            tech_stack.append(headers["Server"])
        if not tech_stack:
            tech_stack.append("Kh√¥ng x√°c ƒë·ªãnh")

        print(f"[+] C√¥ng ngh·ªá web ph√°t hi·ªán: {', '.join(tech_stack)}")

        # X√°c ƒë·ªãnh CMS (WordPress, Joomla, v.v.)
        cms_detected = None
        html = requests.get(target).text
        if "wp-content" in html:
            cms_detected = "WordPress"
        elif "Joomla" in html:
            cms_detected = "Joomla"
        elif "Drupal" in html:
            cms_detected = "Drupal"
        
        if cms_detected:
            print(f"[+] Ph√°t hi·ªán CMS: {cms_detected}")
        
        # G·ª£i √Ω qu√©t ph√π h·ª£p
        print("\n[üí°] G·ª£i √Ω qu√©t ph√π h·ª£p:")
        if "PHP" in tech_stack or cms_detected in ["WordPress", "Joomla"]:
            print("- C√≥ th·ªÉ c√≥ SQLi. Khuy·∫øn ngh·ªã qu√©t SQLMap.")
        if "nginx" in tech_stack or "Apache" in tech_stack:
            print("- C√≥ th·ªÉ c√≥ c·∫•u h√¨nh sai. Khuy·∫øn ngh·ªã ki·ªÉm tra Misconfiguration.")
        if cms_detected == "WordPress":
            print("- Ki·ªÉm tra plugin & theme b·∫±ng WPScan.")

    except Exception as e:
        print(f"[-] L·ªói khi ph√¢n t√≠ch m·ª•c ti√™u: {e}")

#-----------------------------------------------#
# H√†m qu√©t port v√† d·ªãch v·ª• b·∫±ng Nmap 
def scan_nmap(target):
    """ Qu√©t port v√† d·ªãch v·ª• b·∫±ng Nmap """
    clean_target = clean_target_url(target)  # L√†m s·∫°ch URL

    # Ki·ªÉm tra xem c√≥ th·ªÉ ph√¢n gi·∫£i t√™n mi·ªÅn kh√¥ng
    ip_target = resolve_domain(clean_target)
    if not ip_target:
        ip_target = input("[!] Nh·∫≠p ƒë·ªãa ch·ªâ IP c·ªßa m·ª•c ti√™u: ").strip()

    print("\n[+] ƒêang qu√©t Port v√† Service b·∫±ng Nmap...")

    command = f"nmap -sV -Pn {ip_target}"
    print(f"\n[+] ƒêang th·ª±c thi: {command}")
    
    try:
        result = subprocess.run(command, shell=True, text=True, capture_output=True)
        output = result.stdout + result.stderr

        if result.returncode != 0:
            print("\n[-] L·ªánh g·∫∑p l·ªói:")
            print(output)
            return

        print("\n[+] K·∫øt qu·∫£ qu√©t:")
        print(output)
    except Exception as e:
        print(f"[-] L·ªói h·ªá th·ªëng: {e}")
# H√†m qu√©t SQL Injection b·∫±ng SQLMap
def scan_sqli(target):
    print("\n[+] ƒêang ki·ªÉm tra SQL Injection b·∫±ng SQLMap...")
    run_command(f"sqlmap -u {target} --dbs --batch")

#-----------------------------------------------#
# üî• AI t·ª± ƒë·ªông s·ª≠a l·ªói n·∫øu g·∫∑p l·ªói khi qu√©t Misconfiguration
def fix_misconfig_scan(target):
    print("\n[AI] ƒêang th·ª≠ thay th·∫ø `http-config-check.nse` b·∫±ng `http-enum.nse`, `http-headers.nse`, `http-vuln*`...")
    run_command(f"nmap --script=http-enum,http-headers,http-vuln* {target}")
# H√†m qu√©t Misconfiguration
def scan_misconfiguration(target):
    print("\n[+] ƒêang ki·ªÉm tra l·ªói c·∫•u h√¨nh sai...")
    run_command(f"nmap --script=http-config-check.nse {target}", fix_function=lambda: fix_misconfig_scan(target))

#-----------------------------------------------#
# H√†m qu√©t XSS b·∫±ng XSStrike
def scan_xss(target):
    print("\n[+] ƒêang qu√©t XSS b·∫±ng XSStrike...")
    run_command(f"python3 XSStrike/xsstrike.py -u {target}")

def get_params(target):
    print(f"[+] ƒêang t√¨m tham s·ªë t·ª´ {target}...")

    # L·∫•y URL t·ª´ Wayback Machine
    os.system(f"echo {target} | waybackurls | tee urls.txt")

    # L·∫•y URL t·ª´ gau
    os.system(f"gau {target} >> urls.txt")

    # D√≤ t√¨m tham s·ªë b·∫±ng ParamSpider
    os.system(f"python3 ParamSpider/paramspider.py -d {target} --level high --quiet")

    print("[+] ƒê√£ thu th·∫≠p xong c√°c URL c√≥ tham s·ªë!")
    try:
        with open("urls.txt", "r") as file:
            urls = file.readlines()
    except FileNotFoundError:
        print("[-] L·ªói: Kh√¥ng t√¨m th·∫•y file urls.txt! H√£y ki·ªÉm tra l·∫°i.")
        urls = []
    
def scan_xss(target):
    with open("urls.txt", "r") as file:
        urls = file.readlines()

    if not urls:
        print("[-] Kh√¥ng t√¨m th·∫•y URL n√†o c√≥ tham s·ªë!")
        return

    print("[+] ƒêang qu√©t XSS b·∫±ng XSSStrike...")

    for url in urls:
        url = url.strip()
        print(f"[+] Qu√©t: {url}")
        os.system(f"python3 XSStrike/xsstrike.py -u {url}")

#-----------------------------------------------#
# H√†m qu√©t b·∫£o m·∫≠t web b·∫±ng Nikto
def scan_nikto(target):
    print("\n[+] ƒêang qu√©t b·∫£o m·∫≠t Webserver b·∫±ng Nikto...")
    run_command(f"nikto -h {target}")

#-----------------------------------------------#
# H√†m qu√©t SSRF b·∫±ng SSRFmap
def scan_ssrf(target):
    print("\n[+] ƒêang ki·ªÉm tra SSRF b·∫±ng SSRFmap...")
    run_command(f"python3 SSRFmap/ssrfmap.py -u {target}")

#-----------------------------------------------#
# Menu ch·ªçn ki·ªÉu qu√©t
def main():
    print("===================================")
    print("   TOOL PENTEST WEB SERVER AI")
    print("===================================")
    
    target = input("Nh·∫≠p URL/IP m·ª•c ti√™u: ").strip()

    # üî• T·ª± ƒë·ªông ph√¢n t√≠ch tr∆∞·ªõc khi qu√©t
    analyze_target(target)

    while True:
        print("\nCh·ªçn ki·ªÉu qu√©t:")
        print("1. Qu√©t Port v√† Service (Nmap)")
        print("2. Qu√©t XSS (XSStrike)")
        print("3. Qu√©t b·∫£o m·∫≠t Webserver (Nikto)")
        print("4. Qu√©t SSRF (SSRFmap)")
        print("5. Ki·ªÉm tra l·ªói c·∫•u h√¨nh sai (Misconfiguration)")
        print("6. Qu√©t SQL Injection (SQLMap)")
        print("99. Tho√°t tool")
        
        choice = input("Nh·∫≠p l·ª±a ch·ªçn: ").strip()
        
        if choice == "1":
            scan_nmap(target)
        elif choice == "2":
            scan_xss(target)
        elif choice == "3":
            scan_nikto(target)
        elif choice == "4":
            scan_ssrf(target)
        elif choice == "5":
            scan_misconfiguration(target)
        elif choice == "6":
            scan_sqli(target)
        elif choice == "99":
            print("\n[+] Tho√°t tool. H·∫πn g·∫∑p l·∫°i!")
            break
        else:
            print("\n[-] L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá, vui l√≤ng nh·∫≠p l·∫°i.")

if __name__ == "__main__":
    main()
